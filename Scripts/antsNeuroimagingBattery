#!/opt/local/bin/perl -w
use strict;
use File::Path;
use File::Spec;
use File::Basename;

if ( scalar(@ARGV) < 2) {
    die "Usage: antsNeuroimagingBattery dim inputDirectory outputDirectory templateMask [templateLabels] [image_type] \n";
}   

my $dim = $ARGV[0];
my $inputdir = $ARGV[1];
my $outputdir = $ARGV[2];
my $mask = $ARGV[3];
my $labels = "";
if ( scalar(@ARGV) > 4 ) {
  $labels = $ARGV[4];
}

chomp($outputdir);
$outputdir = File::Spec->rel2abs($outputdir);
chomp($inputdir);
$inputdir = File::Spec->rel2abs($inputdir);

my $time = basename($inputdir);

my $subjectdir = substr( $inputdir, 0, length($inputdir)-length($time) );
my $subject = basename($subjectdir);

my $labelflag = "";
if ( -s $labels ) {
  $labelflag = "-l $labels";
}

my $warpflag = "-w ${outputdir}/${subject}_${time}_TemplateToSubject";
if ( ! -s "${outputdir}/${subject}_${time}_TemplateToSubject1Warp.nii.gz" ) {
  $warpflag = "-w ${outputdir}/${subject}_${time}_BrainSegmentationPrior";
}

# Find original T1 data
my @inputT1list = glob( "${inputdir}/Anatomy/${subject}_${time}_*t1.nii.gz" );
my $t1 = "";
if ( scalar(@inputT1list) > 0 ) {
  $t1 = $inputT1list[scalar(@inputT1list)-1];
  chomp($t1);
  print( "Using T1 input image: $t1 \n" );

}
else {
  print( "Searched for ${inputdir}/Anatomy/${subject}_${time}_*t1.nii.gz \n");
  die "No input T1 image found. Exiting \n";
}

# Find antsCorticalThickness processed data
my $t1brain = "";
my $fullt1brain = "";
my @brainT1list = glob( "${outputdir}/${subject}_${time}_*BrainExtractionBrain.nii.gz" );
if ( scalar(@brainT1list) > 0 ) {
  $t1brain = $brainT1list[0];
  chomp($t1brain);
  print( "Using T1 brain image: $t1brain \n" );

}
else {
  die "No input T1 brain image found. Exiting \n";
}
# Find antsCorticalThickness processed data
my @fullbrainT1list = glob( "${outputdir}/${subject}_${time}_*FullBrain.nii.gz" );
print( "@fullbrainT1list \n" );
if ( scalar(@fullbrainT1list) > 0 ) {
  $fullt1brain = $fullbrainT1list[0];
  chomp($fullt1brain);
  print( "Using T1 full brain image: $fullt1brain \n" );

}
else {
  print( "No input T1 full brain image found. Creating one now\n" );

  $fullt1brain = "${outputdir}/${subject}_${time}_FullBrain.nii.gz";
  my $smask = "${outputdir}/${subject}_${time}_BrainExtractionFullMask.nii.gz";
  my $smaskPrior = "${outputdir}/${subject}_${time}_BrainExtractionFullMaskPrior.nii.gz";
  my $seg = "${outputdir}/${subject}_${time}_BrainExtractionFullSegmentation.nii.gz";
  my $segwm = "${outputdir}/${subject}_${time}_BrainExtractionFullSegmentationWM.nii.gz";
  my $seggm = "${outputdir}/${subject}_${time}_BrainExtractionFullSegmentationGM.nii.gz";
  my $segcsf = "${outputdir}/${subject}_${time}_BrainExtractionFullSegmentationCSF.nii.gz";
  my $segtmp = "${outputdir}/${subject}_${time}_BrainExtractionFullSegmentationTemp.nii.gz";

  my $warpMask =  "antsApplyTransforms -d $dim -i $mask -o $smaskPrior -t [${outputdir}/${subject}_${time}_BrainExtractionPrior0GenericAffine.mat,1] -t ${outputdir}/${subject}_${time}_BrainExtractionPrior1InverseWarp.nii.gz -r $t1 -n Gaussian";
  print( " $warpMask \n" );
  system( $warpMask );

  system("ThresholdImage ${dim} $smaskPrior $smaskPrior 0.5 1 1 0");
  system("ImageMath ${dim} $smaskPrior MD $smaskPrior 2");
  system("ImageMath ${dim} $smaskPrior GetLargestComponent $smaskPrior");
      
  system("Atropos -d ${dim} -o $seg -a $t1 -x $smaskPrior -i kmeans[3] -c [3,0] -m [0.1,1x1x1] -k Gaussian" );

  system( "ThresholdImage ${dim} $seg $segwm 3 3 1 0" );
  system( "ThresholdImage ${dim} $seg $seggm 2 2 1 0" );
  system( "ThresholdImage ${dim} $seg $segcsf 1 1 1 0" );

  system("ImageMath ${dim} $seggm GetLargestComponent $seggm");
  system("ImageMath ${dim} $segwm GetLargestComponent $segwm");

  system("ImageMath $dim $segtmp FillHoles $seggm 2");
  system("MultiplyImages $dim $seggm $segtmp $seggm");
  
  system( "MultiplyImages $dim $segwm 3 $segwm");
  system( "ImageMath $dim $segtmp ME $segcsf 10");
  
  system( "ImageMath $dim $seggm addtozero $seggm $segtmp" );
  system( "MultiplyImages $dim $seggm 2 $seggm" );
  system( "ImageMath $dim $seg addtozero $segwm $segwm" );
  system( "ImageMath $dim $seg addtozero $seg $segcsf" );

  system( "ThresholdImage $dim $seg $smask 2 3");
  system( "ImageMath $dim $smask ME $smask 2" );
  system( "ImageMath $dim $smask GetLargestComponent $smask" );
  system( "ImageMath $dim $smask MD $smask 4" );
  system( "ImageMath $dim $smask FillHoles $smask 2" );
  system( "ImageMath $dim $smask addtozero $smask $smaskPrior" );
  system( "ImageMath $dim $smask MD $smask 5" );
  system( "ImageMath $dim $smask ME $smask 5" );
  system( "ImageMath $dim $fullt1brain m $t1 $smask");

}


# Check for Resting BOLD data ( only use last in list )
my @boldlist = glob( "${inputdir}/BOLD/${subject}_${time}_*bold_2.nii.gz" );
if ( scalar(@boldlist) > 0 ) {
  my $bold = $boldlist[scalar(@boldlist)-1];
  chomp($bold);
  print( "Using RsBOLD image: $bold \n" );

  my $bolddir = "${outputdir}/BOLD";
  if ( ! -d $bolddir ) {
    mkdir( $bolddir );
  }
  
  # preprocess bold data ( slice timing & motion correction )
  my $obold = "${bolddir}/${subject}_${time}_bold.nii.gz";
  my $mbold = "${bolddir}/${subject}_${time}_meanbold.nii.gz";
  my $oname = "${bolddir}/${subject}_${time}_";
  if ( ! -s "$obold" ) {
    system( "ImageMath 4 $obold SliceTimingCorrection $bold 0 sinc" );
    system( "antsMotionCorr -d 3 -a $obold -o $mbold" );
    system( "antsMotionCorr -d 3 -u $mbold -o [ $oname, $obold, $mbold ] -m mi[ $obold, $obold, 1, 32, Regular, 0.1 ]  -t Affine[0.2] -i 25 -e 1 -f 1 -s 0 -l 0 -n 200" );
  }

  my $lowt1 = "${bolddir}/${subject}_${time}_t1.nii.gz";
  if ( ! -s "$lowt1" ) {
    my $resample = "ResampleImageBySpacing 3 $fullt1brain $lowt1 2 2 2";
    system($resample);
  }

  my $boldexe = "sh antsIntermodalityIntrasubject.sh -d $dim -t 2 -i $mbold -r $lowt1 -x ${outputdir}/${subject}_${time}_BrainExtractionFullMask.nii.gz $warpflag -o ${bolddir}/${subject}_${time}_";
  print( "$boldexe \n") ;
  system( $boldexe );
  

}

# Check for DTI
my @dtilist = glob( "${inputdir}/DTI/${subject}_${time}*_dt.nii.gz" );
if ( scalar(@dtilist) > 0 ) {
  my $dti = $dtilist[scalar(@dtilist)-1];
  chomp($dti);
  print( "Using DTI image: $dti \n" );

  my $dtidir = "${outputdir}/DTI";
  if ( ! -d $dtidir ) {
    mkdir( $dtidir );
  }

  my $lowt1 = "${dtidir}/${subject}_${time}_t1.nii.gz";
  if ( ! -s "$lowt1" ) {
    my $resample = "ResampleImageBySpacing 3 $fullt1brain $lowt1 2 2 2";
    system($resample);
  }

  my @dwilist = glob("${inputdir}/DTI/${subject}_${time}*_averagedwi.nii.gz" );
  my $dwi = $dwilist[scalar(@dwilist)-1];

  if ( ! -s "${dtidir}/${subject}_${time}_Anatomical_FA.nii.gz" ) {
    my $dtiexe = "sh antsIntermodalityIntrasubject.sh -d $dim -t 2 -i $dwi -b $dti -r $lowt1 -R $mask -x ${outputdir}/${subject}_${time}_BrainExtractionFullMask.nii.gz $warpflag -o ${dtidir}/${subject}_${time}_";
    system( $dtiexe );

    system("ImageMath $dim ${dtidir}/${subject}_${time}_Anatomical_FA.nii.gz TensorFA ${dtidir}/${subject}_${time}_Anatomical_DT.nii.gz");
    system("ImageMath $dim ${dtidir}/${subject}_${time}_Anatomical_RD.nii.gz TensorRadialDiffusion ${dtidir}/${subject}_${time}_Anatomical_DT.nii.gz");
    system("ImageMath $dim ${dtidir}/${subject}_${time}_Anatomical_MD.nii.gz TensorMeanDiffusion ${dtidir}/${subject}_${time}_Anatomical_DT.nii.gz");
    
    # Remove DT in T1 space due to space concerns
    system( "rm ${dtidir}/${subject}_${time}_Anatomical_DT.nii.gz" );

  }

  if ( ! -s "${dtidir}/${subject}_${time}_Template_FA.nii.gz" ) {

    my $warpdti = "antsApplyTransforms -d $dim -e 2 -i $dti -o ${dtidir}/${subject}_${time}_Template_DT.nii.gz -r ${outputdir}/${subject}_${time}_ExtractedTemplateBrain.nii.gz -t [ ${outputdir}/${subject}_${time}_TemplateToSubject0GenericAffine.mat, 1 ] -t ${outputdir}/${subject}_${time}_TemplateToSubject1InverseWarp.nii.gz  -t ${dtidir}/${subject}_${time}_1Warp.nii.gz -t ${dtidir}/${subject}_${time}_0GenericAffine.mat";
    system($warpdti);

    system("ImageMath $dim ${dtidir}/${subject}_${time}_Template_FA.nii.gz TensorFA ${dtidir}/${subject}_${time}_Template_DT.nii.gz");
    system("ImageMath $dim ${dtidir}/${subject}_${time}_Template_RD.nii.gz TensorRadialDiffusion ${dtidir}/${subject}_${time}_Template_DT.nii.gz");
    system("ImageMath $dim ${dtidir}/${subject}_${time}_Template_MD.nii.gz TensorMeanDiffusion ${dtidir}/${subject}_${time}_Template_DT.nii.gz");
    
    # Remove DT in T1 space due to space concerns
    system( "rm ${dtidir}/${subject}_${time}_Template_DT.nii.gz" );

  }
 


}

# Check for Mag Transfer
my @mtlist = glob( "${inputdir}/MT/${subject}_${time}_*MT*.nii.gz" );
if ( scalar(@mtlist) > 0 ) {
  my $mt = $mtlist[scalar(@mtlist)-1];
  chomp($mt);
  print( "Using MT image: $mt \n" );
}

# Check for PASL
my @pasllist = glob( "${inputdir}/rawNii/${subject}_${time}_*_fairest_UI_1200ms*.nii.gz" );
if ( scalar(@pasllist) > 0 ) {
  my $pasl = $pasllist[scalar(@pasllist)-1];
  chomp($pasl);
  print( "Using PASL image: $pasl \n" );
    
  my @m0list = glob( "${inputdir}/rawNii/${subject}_${time}_*M0_1.nii.gz" );
  my $m0 = $m0list[scalar(@m0list)-1];
  chomp($m0);
  print( "Using PASL-M0 image: $m0 \n" );

  my $pasldir = "${outputdir}/PASL";
  if ( ! -d $pasldir ) {
    mkdir( $pasldir );
  }

  my $oname = "${pasldir}/${subject}_${time}_";

  my $m0avg = "${oname}m0.nii.gz";

  my $lowt1 = "${oname}t1.nii.gz";
  if ( ! -s "$lowt1" ) {
    my $resample = "ResampleImageBySpacing 3 $fullt1brain $lowt1 2 2 2";
    system($resample);
  }

  if ( ! -s "${m0avg}" ) {
    system( "antsMotionCorr -d 3 -o [ ${oname}, ${oname}m0_all.nii.gz, ${m0avg} ] -m mi[ $m0, $m0, 1, 32, Regular, 0.1 ] -t Affine[0.2] -i 25 -e 1 -f 1 -s 0 -l 0 -n 200" );
    system( "antsMotionCorr -d 3 -a ${oname}m0_all.nii.gz -o ${m0avg}" ); 
  }

  my $opasl = "${oname}pasl.nii.gz";
  if ( ! -s "${opasl}" ) {
    system( "antsMotionCorr -d 3 -u ${m0avg} -o [ ${oname}, ${opasl}, ${oname}paslavg.nii.gz ] -m mi[ $pasl, $pasl, 1, 32, Regular, 0.1 ] -t Affine[0.2] -i 25 -e 1 -f 1 -s 0 -l 0 -n 200" );
  }

  if ( ! -s "${oname}0GenericAffine.mat" ) {
    print( "PCASL-M0 to T1 matching \n");
    my $paslexe = "sh antsIntermodalityIntrasubject.sh -d $dim -t 2 -i $m0avg -r $lowt1 -R $mask -x ${outputdir}/${subject}_${time}_BrainExtractionFullMask.nii.gz $warpflag -o $oname ";
    system( $paslexe );
  }
  
  if ( ! -s "${oname}meancbf.nii.gz" ) {
    system( "cbf_pasl_robust_batch.R ${opasl} ${m0avg} ${oname}meancbf.nii.gz" );
  }
  
  if ( ! -s "${oname}Template_meancbf.nii.gz" ) {
    my $wpasl1 = "antsApplyTransforms -d $dim -n Gaussian -i ${oname}meancbf.nii.gz -o ${oname}Template_meancbf.nii.gz -r ${outputdir}/${subject}_${time}_ExtractedTemplateBrain.nii.gz -t [ ${outputdir}/${subject}_${time}_TemplateToSubject0GenericAffine.mat, 1 ] -t ${outputdir}/${subject}_${time}_TemplateToSubject1InverseWarp.nii.gz  -t ${oname}1Warp.nii.gz -t ${oname}0GenericAffine.mat";
    system( $wpasl1 );
    }

  if ( ! -s "${oname}Anatomical_meancbf.nii.gz" ) {    
    my $wpasl2 = "antsApplyTransforms -d $dim -i ${oname}meancbf.nii.gz -o ${oname}Anatomical_meancbf.nii.gz -r ${outputdir}/${subject}_${time}_BrainExtractionBrain.nii.gz -t ${oname}1Warp.nii.gz -t ${oname}0GenericAffine.mat -n Gaussian";
    system( $wpasl2 );
    }


}

# Check for PCASL
my @pcasllist = glob( "${inputdir}/PCASL/*.nii.gz" );
if ( scalar(@pcasllist) > 0 ) {
  my $pcasl = $pcasllist[scalar(@pcasllist)-1];
  chomp($pcasl);
  print( "Using PCASL image: $pcasl \n" );
  
  my $pcasldir = "${outputdir}/PCASL";
  my $oname = "${pcasldir}/${subject}_${time}_";
  my $meancbf = "${oname}meancbf.nii.gz";
  
  if ( ! -s "$meancbf" ) {
    my $getcbf = "cbf_pcasl.sh $pcasl $meancbf ${oname}m0.nii.gz";
    system($getcbf);
  }
  
  if ( ! -s "${oname}Anatomical.nii.gz" ) {
    my $cbfexe = "sh antsIntermodalityIntrasubject.sh -d $dim -t 2 -i ${oname}m0.nii.gz -r $fullt1brain -R $mask -x ${outputdir}/${subject}_${time}_BrainExtractionFullMask.nii.gz $labelflag $warpflag -o ${oname}";
    system( $cbfexe );
  }
  
  if ( ! -s "${oname}Template_meancbf.nii.gz" ) {
    my $wpcasl1 = "antsApplyTransforms -d $dim -n Gaussian -i ${meancbf} -o ${oname}Template_meancbf.nii.gz -r ${outputdir}/${subject}_${time}_ExtractedTemplateBrain.nii.gz -t [ ${outputdir}/${subject}_${time}_TemplateToSubject0GenericAffine.mat, 1 ] -t ${outputdir}/${subject}_${time}_TemplateToSubject1InverseWarp.nii.gz  -t ${oname}1Warp.nii.gz -t ${oname}0GenericAffine.mat";
    system( $wpcasl1 );
    }

  if ( ! -s "${oname}Anatomical_meancbf.nii.gz" ) {    
    my $wpcasl2 = "antsApplyTransforms -d $dim -i ${meancbf} -o ${oname}Anatomical_meancbf.nii.gz -r ${outputdir}/${subject}_${time}_BrainExtractionBrain.nii.gz -t ${oname}1Warp.nii.gz -t ${oname}0GenericAffine.mat -n Gaussian";
    system( $wpcasl2 );
    }
  
}

# Check for provided CBF image
my @cbflist = glob( "${inputdir}/CBF/${subject}_${time}_*meancbf.nii.gz");
if ( scalar(@cbflist) > 0 ) {
  my $cbf = $cbflist[scalar(@cbflist)-1];
  chomp($cbf);
  print( "Using CBF image: $cbf \n" );

  my $cbfdir = "${outputdir}/CBF";
  if ( ! -d $cbfdir ) {
    mkdir( $cbfdir );
  }

  if ( ! -s "${cbfdir}/${subject}_${time}_Anatomical.nii.gz" ) {
    my $cbfexe = "sh antsIntermodalityIntrasubject.sh -d $dim -t 2 -i $cbf -r $fullt1brain -R $mask -x ${outputdir}/${subject}_${time}_BrainExtractionFullMask.nii.gz $labelflag $warpflag -o ${cbfdir}/${subject}_${time}_";
    system( $cbfexe );
  }
  else {
    print( "CBF already processed, skipping this modality\n");
  }

}

